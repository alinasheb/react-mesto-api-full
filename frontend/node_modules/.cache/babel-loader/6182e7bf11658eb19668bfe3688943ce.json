{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._url = options.url;\n    this._headers = options.headers;\n  }\n\n  getInitialCard() {\n    return fetch(`${this._url}/cards`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(res => {\n      return this.getResponseData(res);\n    });\n  }\n\n  getUserInfo() {\n    return fetch(`${this._url}/users/me`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(res => {\n      return this.getResponseData(res);\n    });\n  }\n\n  getInitialData() {\n    return Promise.all([this.getUserInfo(), this.getInitialCard()]);\n  }\n\n  setUserInfo(data) {\n    return fetch(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    }).then(res => {\n      return this.getResponseData(res);\n    });\n  }\n\n  setAvatar(data) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data\n      })\n    }).then(res => {\n      return this.getResponseData(res);\n    });\n  }\n\n  postNewCard(data) {\n    return fetch(`${this._url}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(res => {\n      return this.getResponseData(res);\n    });\n  }\n\n  deleteCard(id) {\n    return fetch(`${this._url}/cards/${id}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => {\n      return this.getResponseData(res);\n    });\n  }\n\n  changeLikeCardStatus(cardId, isLiked) {\n    return fetch(`${this._url}/cards/likes/${cardId}`, {\n      method: isLiked ? 'PUT' : 'DELETE',\n      headers: this._headers\n    }).then(res => {\n      return this.getResponseData(res);\n    });\n  }\n\n  setToken(token) {\n    this._headers = { ...this._headers,\n      Authorization: `Bearer ${token}`\n    };\n  }\n\n  getResponseData(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка:${res.status}`);\n    }\n  }\n\n}\n\nconst api = new Api({\n  url: \"https://mesto.nomoreparties.co/v1/cohort-41\",\n  headers: {\n    authorization: 'cc692a39-3e91-4f31-81a0-56c5cbc20e10',\n    \"Content-type\": \"application/json\"\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","options","_url","url","_headers","headers","getInitialCard","fetch","method","then","res","getResponseData","getUserInfo","getInitialData","Promise","all","setUserInfo","data","body","JSON","stringify","name","about","setAvatar","avatar","postNewCard","link","deleteCard","id","changeLikeCardStatus","cardId","isLiked","setToken","token","Authorization","ok","json","reject","status","api","authorization"],"sources":["C:/Users/Asus/Desktop/проект15/react-mesto-api-full/frontend/src/utils/Api.js"],"sourcesContent":["\nclass Api {\n  constructor(options) {\n    this._url = options.url;\n    this._headers = options.headers;\n\n  }\n\n  getInitialCard() {\n    return fetch(`${this._url}/cards`, {\n      method: 'GET',\n      headers: this._headers,\n    }).then((res) => {\n      return this.getResponseData(res);\n    });\n  }\n\n  getUserInfo() {\n    return fetch(`${this._url}/users/me`, {\n      method: 'GET',\n      headers: this._headers,\n    }).then((res) => {\n      return this.getResponseData(res);\n  });\n}\n\ngetInitialData() {\n  return Promise.all([this.getUserInfo(), this.getInitialCard()]);\n}\n\n\n\nsetUserInfo(data) {\n  return fetch(`${this._url}/users/me`, {\n    method: 'PATCH',\n    headers: this._headers,\n    body: JSON.stringify({\n      name: data.name,\n      about: data.about,\n    }),\n  }).then((res) => {\n    return this.getResponseData(res);\n  });\n}\n\nsetAvatar(data) {\n  return fetch(`${this._url}/users/me/avatar`, {\n    method: 'PATCH',\n    headers: this._headers,\n    body: JSON.stringify({\n      avatar: data,\n    }),\n  }).then((res) => {\n    return this.getResponseData(res);\n  });\n}\n\n  postNewCard(data) {\n    return fetch(`${this._url}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link,\n      }),\n    }).then((res) => {\n      return this.getResponseData(res);\n    });\n  }\n\n  deleteCard(id) {\n    return fetch(`${this._url}/cards/${id}`, {\n      method: 'DELETE',\n      headers: this._headers,\n    }).then((res) => {\n      return this.getResponseData(res);\n    });\n  }\n\n\n  changeLikeCardStatus(cardId, isLiked) {\n    return fetch(`${this._url}/cards/likes/${cardId}`, {\n      method: isLiked ? 'PUT' : 'DELETE',\n      headers: this._headers,\n    }).then((res) => {\n      return this.getResponseData(res);\n    });\n  }\n\n\n  setToken(token) {\n    this._headers = {\n      ...this._headers,\n      Authorization: `Bearer ${token}`,\n    }\n  }\n\n  getResponseData(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка:${res.status}`);\n    }\n  }\n}\n\nconst api = new Api ({\n  url: \"https://mesto.nomoreparties.co/v1/cohort-41\",\n  headers: {\n    authorization: 'cc692a39-3e91-4f31-81a0-56c5cbc20e10',\n    \"Content-type\": \"application/json\"\n  }\n});\n\n\n\n\n\nexport default api;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}